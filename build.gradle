buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-release" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath 'org.ajoberstar:gradle-git:1.1.0'
    }
}

group = 'inkrement'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

jar {
    baseName = 'spry-backend'
    version =  '0.1.2'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }

    //use jetty instead of tomcat because tomcat is not able to load
    // jks file from jar
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude module: "tomcat-jdbc"
    }
    // use different connection pool to resolve performance issues
    compile("com.zaxxer:HikariCP")
    // used for Google/Android notifications
    compile("org.apache.httpcomponents:httpclient");
    // producation db connection
    compile("mysql:mysql-connector-java")
    // used for Google Android notifications
    compile("org.json:json:20141113")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}


docker {
    maintainer = 'Christian Hotz-Behofsits <chris.hotz.behofsits@gmail.com>'
    baseImage = 'java:8'
}

task pushDocker(type: Docker, dependsOn: build) {

    // VOLUME /tmp
    // only important for tomcat but
    // not able to use tomcat in combination with ssl-cert
    //volume "/tmp"

    //ADD spryBackend-0.1.0.jar app.jar
    //jar.baseName + "-" + jar.version + ".jar"
    addFile(jar.archivePath, "app.jar")

    //RUN bash -c 'touch /app.jar'
    runCommand 'bash -c "touch /app.jar"'

    //ENTRYPOINT
    entryPoint(["java", "-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"])

    applicationName = jar.baseName

    // auto-push to docker hub (will be deployed to server)
    push = true
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

/**
 * GIT property file generation.
 *
 * this part generates a git property file for spring actuator to show the git current version
 */


apply plugin: GitPropertiesPlugin


import org.ajoberstar.grgit.Grgit
import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.plugins.BasePlugin
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.tasks.TaskAction

class GitPropertiesPlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        def task = project.tasks.create('generateGitProperties', GenerateGitPropertiesTask)
        task.setGroup(BasePlugin.BUILD_GROUP)
        ensureTaskRunsOnJavaClassesTask(project, task)
    }

    private void ensureTaskRunsOnJavaClassesTask(Project project, Task task) {
        project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME).dependsOn(task)
    }

    static class GenerateGitPropertiesTask extends DefaultTask {
        @TaskAction
        void generate() {
            def repo = Grgit.open(project.file('.'))
            def dir = new File(project.buildDir, "resources/main")
            def file = new File(project.buildDir, "resources/main/git.properties")
            if (!dir.exists()) {
                dir.mkdirs()
            }
            if (!file.exists()) {
                file.createNewFile()
            }
            def map = ["git.branch"                : repo.branch.current.name
                       , "git.commit.id"           : repo.head().id
                       , "git.commit.id.abbrev"    : repo.head().abbreviatedId
                       , "git.commit.user.name"    : repo.head().author.name
                       , "git.commit.user.email"   : repo.head().author.email
                       , "git.commit.message.short": repo.head().shortMessage
                       , "git.commit.message.full" : repo.head().fullMessage
                       , "git.commit.time"         : repo.head().time.toString()]
            def props = new Properties()
            props.putAll(map)
            props.store(file.newWriter(), "")
        }
    }
}